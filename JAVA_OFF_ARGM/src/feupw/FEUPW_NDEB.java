/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package feupw;

import com.gruposantorun.comprobantes.modelo.modelo.CampoAdicional;
import com.gruposantorun.comprobantes.modelo.modelo.Impuesto;
import com.gruposantorun.comprobantes.modelo.modelo.InfoAdicional;
import com.gruposantorun.comprobantes.modelo.modelo.InfoTributaria;
import com.gruposantorun.comprobantes.modelo.modelo.notadebito.InfoNotaDebito;
import com.gruposantorun.comprobantes.modelo.modelo.notadebito.Motivo;
import com.gruposantorun.comprobantes.seguridad.CertificadosSSL;
import com.gruposantorun.comprobantes.seguridad.Signer;
import com.gruposantorun.comprobantes.util.ClaveAcceso;
import com.gruposantorun.comprobantes.util.XMLUtil;
import com.gruposantorun.comprobantes.ws.AutorizacionComprobantesWS;
import com.gruposantorun.comprobantes.ws.EnvioComprobantesWS;
import com.gruposantorun.comprobantes.ws.VerificarDisponibilidad;
import com.gruposantorun.comprobantes.ws.VerificarExistenciaAutorizado;
import ec.gob.sri.comprobantes.ws.Comprobante;
import ec.gob.sri.comprobantes.ws.RespuestaSolicitud;
import ec.gob.sri.comprobantes.ws.aut.Autorizacion;
import ec.gob.sri.comprobantes.ws.aut.RespuestaComprobante;
import java.io.*;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Marshaller;
import javax.xml.namespace.QName;
import javax.xml.ws.WebServiceException;
import org.jespxml.JespXML;
import org.jespxml.modelo.Tag;

public class FEUPW_NDEB extends javax.swing.JFrame {

    boolean pasar = false;
    int contador = -1;
    Connection con = null;
    ResultSet rs = null;
    CallableStatement cst = null;
    String tipo = "";
    LeerSaiFact fac = new LeerSaiFact();
    VerificarExistenciaAutorizado ver = new VerificarExistenciaAutorizado();
    VerificarDisponibilidad exi = new VerificarDisponibilidad();
    private static File archivo = null;
    private static FileWriter fichero = null;
    private static FileReader fr = null;
    private static BufferedReader br = null;
    private static PrintWriter escrive = null;
    String auxcod = "";
    String auxnum = "";
    String codemp = "";
    String codsuc = "";
    String tip = "";
    Double cod = 0.0;
    Double num = 0.0;
    ClaveAcceso clv = new ClaveAcceso();
    DefaultTableModel md1 = new DefaultTableModel();
    String nomclave = "";
    String fecAutorizacion = "";
    String numeAutorizacion = "";
    String estadoAutorizacion = "AUTORIZADO";
    String estado = "";
    boolean save = false;
    boolean pasaAut = false;
    boolean procesamiento = false;
    boolean disponibilidad = false;
    boolean contingencia = false;
    boolean existeAutorizado = false;
    boolean obtenerAutorizado = false;
    boolean recibido = false;
    Date date;
    String identificador = "";
    String mensaje = "";
    String informacionAdicional = "";
    String tipo_m = "";
    String Servidor_emp = "";
    String ambiente = "";
    String certificado = "";
    String clavecertificado = "";
    String urlwebService = "";
    String urlwebService1 = "";
    int buscar_aut = 0;
    boolean bandera = false;
    boolean band = false;
    boolean exfccompelec = false;
    String nomAmbiente = "";

    public FEUPW_NDEB() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        primerPaso();
        procesarNotaDebito();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        empresa = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        sucursal = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tipo_deb = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        factura = new javax.swing.JTextField();
        FACT_PROCESAR = new javax.swing.JButton();
        FACT_SALIR = new javax.swing.JButton();
        debito = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nota Debito");
        setResizable(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ASCplus1.png"))); // NOI18N

        jLabel4.setText("Empresa:");

        empresa.setEditable(false);

        jLabel5.setText("sucursal:");

        sucursal.setEditable(false);

        jLabel3.setText("Tipo:");

        tipo_deb.setEditable(false);

        jLabel2.setText("Debito:");

        factura.setEditable(false);
        factura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facturaActionPerformed(evt);
            }
        });

        FACT_PROCESAR.setText("PROCESAR");
        FACT_PROCESAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FACT_PROCESARActionPerformed(evt);
            }
        });

        FACT_SALIR.setText("SALIR");
        FACT_SALIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FACT_SALIRActionPerformed(evt);
            }
        });

        debito.setEditable(false);
        debito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debitoActionPerformed(evt);
            }
        });

        jLabel6.setText("Factura:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(debito)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tipo_deb, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(sucursal)
                            .addComponent(empresa))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FACT_PROCESAR, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(FACT_SALIR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(factura, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel4)
                            .addComponent(empresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel5)
                            .addComponent(sucursal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel3)
                            .addComponent(tipo_deb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(FACT_PROCESAR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(FACT_SALIR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(debito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(factura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void primerPaso() {
        File f = new File("C:\\sai_win\\FEUPW.ini");
        String tipa = "";
        String emp = "";
        String suc = "";
        String num = "";
        String fact = "";
        String existe = "";
        tipa = fac.getTipo();
        emp = fac.getEmpresa();
        suc = fac.getSucursal();
        num = fac.getNumero();
        fact = fac.getFactura();
        empresa.setText(emp);
        sucursal.setText(suc);
        tipo_deb.setText(tipa);
        debito.setText(num);
        factura.setText(fact);

        existe = "SELECT COUNT(*) FROM FCCOMPELEC WITH(NOLOCK) "
                + " WHERE  TIPO=" + tipa
                + " AND    CODEMP=" + emp
                + " AND    CODSUC=" + suc
                + " AND    NUMERO_TRANS=" + num
                + " AND    NUMERO_FACT=" + fact;
        // JOptionPane.showMessageDialog(this, "existe: "+existe, "Aviso", JOptionPane.INFORMATION_MESSAGE);
        try {
            String cont = "";
            pruebanet bd = new pruebanet();
            con = bd.getConexion();
            PreparedStatement pstm = con.prepareStatement(existe);
            ResultSet rs = pstm.executeQuery();
            while (rs.next()) {
                cont = rs.getString("CANTIDAD");
            }

            contador = Integer.parseInt(cont);

        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (Exception e) {
                }
            }
        }
        // JOptionPane.showMessageDialog(this, "contador"+contador, "Aviso", JOptionPane.INFORMATION_MESSAGE); 
        if (contador == 0) {
            exfccompelec = true;
        } else {
            exfccompelec = false;
        }

    }//  fin de primer paso

    private void procesarNotaDebito() {
        ValidaContingengia val = new ValidaContingengia();
        Comprobante_sin cps = new Comprobante_sin();
        ParametrosExternos p = new ParametrosExternos();
        Exepcion_try conti_pasa = new Exepcion_try();
        try {
            pruebanet bd = new pruebanet();
            con = bd.getConexion();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(this, "Error No se puede conectar : " + e.getMessage(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);
        }

        cod = 0.0;
        num = 0.0;
        ///////////////////////////////////////////////////////////////////////////  
        File dir = new File("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoGenerada\\");
        int fila = 0;
        int paso = 0;
        int tm = 0;
        String clave_aux = "";
        String auxfecha = "";
        String nuevo = "";
        String[] fec;
        boolean tranferencia = false;
        boolean envio1 = false;
        boolean envio2 = false;
        auxcod = this.debito.getText();
        auxnum = this.factura.getText();
        if (auxcod.equals("")) {
            cod = 0.0;
        }
        if (auxnum.equals("")) {
            num = 0.0;
        }
        tip = "FA";
        codemp = this.empresa.getText();
        codsuc = this.sucursal.getText();
        cod = Double.parseDouble(auxcod.toString());
        num = Double.parseDouble(auxnum.toString());
        //System.out.println("Codigo: " + cod);
        codemp = codemp.trim().toString();
        codsuc = codsuc.trim().toString();
        tip = tip.trim().toString();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        p.Parametros(codemp, codsuc);
        Servidor_emp = p.getRutaXmlAutorizado().toString();
        ambiente = p.getTipoAmbiente().toString();
        certificado = p.getRutaCertificado();
        clavecertificado = p.getClaveAcceso();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        try {
            cst = con.prepareCall("{call buscar_comp_notaDebito_xml(?,?,?,?,?)}");
            cst.setString(1, codemp);
            cst.setString(2, codsuc);
            cst.setString(3, tip);
            cst.setDouble(4, cod);
            cst.setDouble(5, num);
            rs = cst.executeQuery();
            if (rs.next()) {
                com.gruposantorun.comprobantes.modelo.modelo.notadebito.NotaDebito ntd = new com.gruposantorun.comprobantes.modelo.modelo.notadebito.NotaDebito();
                ntd.setVersion("1.0.0");
                ntd.setId("comprobante");
                //JOptionPane.showMessageDialog(this, "Cliente Econtrado", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                //--------------------------------------------------------------------------------------
                clave_aux = clv.generarClaveAcceso(rs.getString("clave").toString().trim());
                if (clave_aux == null) {
              //      JOptionPane.showMessageDialog(this, "CLAVE ACCESO NO GENERADA, EL ARCHIVO NO SE PUEDE VALIDARSE", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    nomclave = "Debito_error" + rs.getString("secuencial").trim().toString();
                    pasar = false;
                } else {
                    nomclave = clave_aux;
                    pasar = true;
                }//if
                InfoTributaria it = new InfoTributaria();
                it.setAmbiente(rs.getString("ambiente").trim().toString());
                it.setTipoEmision(rs.getString("tipoEmision").trim().toString());
                it.setRazonSocial(rs.getString("razonsocial").trim().toString());
                it.setNombreComercial(rs.getString("nombreComercial").trim().toString());
                it.setRuc(rs.getString("numeroruc").trim().toString());
                it.setClaveAcceso(clave_aux);
                it.setCodDoc("05");
                it.setEstab(rs.getString("estab").trim().toString());
                it.setPtoEmi(rs.getString("ptoEmi"));
                it.setSecuencial(rs.getString("secuencial").trim().toString());
                it.setDirMatriz(rs.getString("dirMatriz").trim().toString());
                ntd.setInfoTributaria(it);

                InfoNotaDebito ifr = new InfoNotaDebito();
                ifr.setFechaEmision(rs.getString("fechaEmision").trim().toString());
                ifr.setDirEstablecimiento(rs.getString("dirEstablecimiento").trim().toString());
                ifr.setTipoIdentificacionComprador(rs.getString("tipoIdentificacionComprador").trim().toString());
                ifr.setRazonSocialComprador(rs.getString("razonSocialComprador").trim().toString());
                ifr.setIdentificacionComprador(rs.getString("identificacionComprador").trim().toString());
                ifr.setContribuyenteEspecial(rs.getString("contribuyenteEspecial").trim().toString());
                ifr.setObligadoContabilidad(rs.getString("obligadoContabilidad").trim().toString());
                ifr.setCodDocModificado(rs.getString("codDocModificado").trim().toString());
                ifr.setNumDocModificado(rs.getString("numDocModificado").trim().toString());
                ifr.setFechaEmisionDocSustento(rs.getString("fechaEmisionDocSustento").trim().toString());
                ifr.setTotalSinImpuestos(new BigDecimal(rs.getString("totalsinImpuesto").trim().toString()));

                //-----------------------------------------------------DETALLE DE LA NOTA DEBITO
                double total = 0.0;
                List<Impuesto> lstimp = new ArrayList();
                Impuesto imp = new Impuesto();
                imp.setCodigo(rs.getString("codigo").trim().toString());
                imp.setCodigoPorcentaje(rs.getString("codigoPorcentaje").trim().toString());
                imp.setTarifa(new BigDecimal(rs.getString("tarifa").trim().toString()));
                imp.setBaseImponible(new BigDecimal(rs.getString("baseImponible").trim().toString()));
                imp.setValor(new BigDecimal(rs.getString("valor").trim().toString()));
                lstimp.add(imp);
                ifr.setImpuesto(lstimp);
                ifr.setValorTotal(new BigDecimal(rs.getString("valorTotal").trim().toString()));
                ntd.setInfoNotaDebito(ifr);
                //-----------------------------------------------------------------------
                List<Motivo> lstmt = new ArrayList();
                Motivo mt = new Motivo();
                mt.setRazon(rs.getString("mrazon").trim().toString());
                mt.setValor(new BigDecimal(rs.getString("mvalor").trim().toString()));
                lstmt.add(mt);
                ntd.setMotivo(lstmt);
                //-----------------------------------------------------------------------   
                InfoAdicional infad = new InfoAdicional();
                List<CampoAdicional> lstifa = new ArrayList();
                CampoAdicional cmpad1 = new CampoAdicional();
                cmpad1.setNombre("Telefono");
                cmpad1.setValue(rs.getString("atelefono").trim().toString());

                CampoAdicional cmpad2 = new CampoAdicional();
                cmpad2.setNombre("Direccion");
                cmpad2.setValue(rs.getString("adireccion").trim().toString());

                CampoAdicional cmpad3 = new CampoAdicional();
                cmpad3.setNombre("Correo");
                cmpad3.setValue(rs.getString("acorreo").trim().toString());

                CampoAdicional cmpadp = new CampoAdicional();
                cmpadp.setNombre("Proveedor");
                cmpadp.setValue("Grupo Santorun");

                lstifa.add(cmpad1);
                lstifa.add(cmpad2);
                lstifa.add(cmpad3);
                lstifa.add(cmpadp);
                infad.setCampoAdicional(lstifa);
                ntd.setInfoAdicional(infad);

                //--------------------------------------------------------------------------------------
                if (dir.exists()) {
                    //System.out.println("existe C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoGenerada\\");
                    XMLUtil.marshall(ntd, "C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoGenerada\\" + nomclave + ".xml");
                    tranferencia = true;
                } else {
                    dir.mkdirs();
                    XMLUtil.marshall(ntd, "C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoGenerada\\" + nomclave + ".xml");
                    //JOptionPane.showMessageDialog(this, "Nota Debito en formato XML generado con Exito...!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    tranferencia = true;
                }
            } else {
                //JOptionPane.showMessageDialog(this, "Nota Debito No Econtrado", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                tranferencia = false;
                System.exit(0);
            }

            cst.close();
            con.close();
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
            System.exit(0);
        }
        disponibilidad = exi.existeConexion(ambiente);
        if (disponibilidad) {
            existeAutorizado = ver.VerificaWebServ(nomclave, ambiente);
            if (existeAutorizado && exfccompelec) {
                existeAutorizado = false;
            }
            contingencia = false;
        } else {
            //JOptionPane.showMessageDialog(null, "Sin conexion al Websrvice, \nGeneración de contingencia...!", "ERROR CONEXION", JOptionPane.YES_NO_CANCEL_OPTION);
            contingencia = true;
            existeAutorizado = false;
            obtenerAutorizado = false;
        }
        if (existeAutorizado) {
            obtenerAutorizado = true;
        } else {
            if (conti_pasa.getTryExp() == 1) {
                contingencia = true;
                disponibilidad = false;
                obtenerAutorizado = false;
            }
            if (disponibilidad) {
                //Validar
                if (tranferencia) {
                    File dirXSD = new File("C:\\xsd\\");
                    if (dirXSD.exists()) {
                        String mensajes = XMLUtil.validarXML(new File("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoGenerada\\" + nomclave + ".xml"), new File("C:\\xsd\\notaDebito.xsd"));
                        if (mensajes == null) {
                            //JOptionPane.showMessageDialog(this, "El archivo fue validado con exito", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            tranferencia = true;
                        } else {
              //              JOptionPane.showMessageDialog(this, "El archivo no se pudo Validar: " + mensajes, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            tranferencia = false;
                            System.exit(0);
                        }//if
                    } else {
                //        JOptionPane.showMessageDialog(this, "La carpeta XSD para validar los comprobantes no exixte ", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        tranferencia = false;
                        System.exit(0);
                    }
                } else {
                  //  JOptionPane.showMessageDialog(this, "Nota Debito No Generada", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    System.exit(0);
                }
                // firmar
                if (tranferencia) {
                    File dirff = new File("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoFirmada\\");
                    if (dirff.exists()) {
                        Signer s = new Signer("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoGenerada\\" + nomclave + ".xml ", "C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoFirmada\\" + nomclave + ".xml");
                        s.parSignGen(certificado, clavecertificado);
                        try {
                            s.firmarFactura();
                            //JOptionPane.showMessageDialog(this, "NOTA DEBITO FIRMADA CON EXITO", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            envio1 = true;
                        } catch (Exception e) {
                    //        JOptionPane.showMessageDialog(this, "ERROR: " + e.getMessage(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            envio1 = false;
                            System.exit(0);
                        }//trycatch
                    } else {
                        dirff.mkdirs();
                        Signer s = new Signer("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoGenerada\\" + nomclave + ".xml ", "C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoFirmada\\" + nomclave + ".xml");
                        s.parSignGen(certificado, clavecertificado);
                        try {
                            s.firmarFactura();
                            //JOptionPane.showMessageDialog(this, "NOTA DEBITO FIRMADA CON EXITO", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            envio1 = true;
                        } catch (Exception e) {
                 //           JOptionPane.showMessageDialog(this, "ERROR: " + e.getMessage(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            envio1 = false;
                            System.exit(0);
                        }//trycatch
                    }// if si existe folio
                } else {
                   // JOptionPane.showMessageDialog(this, "Nota Debito No Paso la validacion XSD", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    System.exit(0);
                }
                if (envio1) {
                    if (ambiente.equals("1")) {
                        urlwebService = "https://celcer.sri.gob.ec/comprobantes-electronicos-ws/RecepcionComprobantes?wsdl";
                    }
                    if (ambiente.equals("2")) {
                        urlwebService = "https://cel.sri.gob.ec/comprobantes-electronicos-ws/RecepcionComprobantes?wsdl";
                    }
                    try {
                        CertificadosSSL.instalarCertificados();
                        EnvioComprobantesWS wsa = new EnvioComprobantesWS(urlwebService.toString().trim());
                        RespuestaSolicitud respuesta = wsa.enviarComprobante(new File("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoFirmada\\" + nomclave + ".xml"));
                        //System.out.println("primero: " + respuesta.getEstado());
                        if (respuesta.getEstado().equals("RECIBIDA")) {
                            recibido = true;
                            contingencia = false;
                            obtenerAutorizado = true;
                        } else {
                            recibido = false;
                            if (respuesta.getEstado().equals("javax.xml.ws.WebServiceException")) {
                                contingencia = true;
                                obtenerAutorizado = false;
                            }
                            if (respuesta.getEstado().equals("DEVUELTA")) {
                                List<Comprobante> lst = respuesta.getComprobantes().getComprobante();
                                //int i = 0;
                                for (Comprobante comprobante : lst) {
                                    List<ec.gob.sri.comprobantes.ws.Mensaje> lstMensaje = comprobante.getMensajes().getMensaje();
                                    for (ec.gob.sri.comprobantes.ws.Mensaje mensaje : lstMensaje) {
                                        // System.out.println("[" + i++ + "]" + mensaje.getMensaje() + "\t" + mensaje.getInformacionAdicional());
                                        if (mensaje.getMensaje().equals("CLAVE DE ACCESO EN PROCESAMIENTO")) {
//                                            JOptionPane.showMessageDialog(this, "ENVIO: " + respuesta.getEstado()
//                                                    + "\n Mensage: " + mensaje.getMensaje()
//                                                    + "\n Motivo: " + mensaje.getInformacionAdicional()
//                                                    + "\n Generación de contingencia...",
//                                                    "Aviso", JOptionPane.INFORMATION_MESSAGE);
                                            contingencia = true;
                                            obtenerAutorizado = false;
                                        } else {
                                            if (mensaje.getMensaje().equals("CLAVE ACCESO REGISTRADA")) {
                                                contingencia = false;
                                                obtenerAutorizado = true;
                                            } else {
//                                                JOptionPane.showMessageDialog(this, "ENVIO: " + respuesta.getEstado()
//                                                        + "\n Mensage: " + mensaje.getMensaje()
//                                                        + "\n Motivo: " + mensaje.getInformacionAdicional()
//                                                        + "\n Generación de contingencia...",
//                                                        "Aviso", JOptionPane.INFORMATION_MESSAGE);
                                                contingencia = true;
                                                obtenerAutorizado = false;

                                            } // fin de la clave en procesamiento

                                        } // fin de la clave en procesamiento
                                    }//for
                                }//for
                            }// fin de devuelta
                        }// fin del recibida
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(FEUPW_NCRE.class.getName()).log(Level.SEVERE, null, ex);
                        //Lanzado para indicar que se ha producido una URL malformada. O bien no existe un protocolo legal se podría encontrar en una especificación de cadena o la cadena no se pudo analizar.
                       // JOptionPane.showMessageDialog(this, "ENVIO(MalformedURLException) Sin respuesta del servidor  del SRI: \n" + ex.getMessage() + "\nGeneración de contingencia... ", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        contingencia = true;
                        obtenerAutorizado = false;
                    } catch (WebServiceException ex) {
                        Logger.getLogger(FEUPW_NCRE.class.getName()).log(Level.SEVERE, null, ex);
                        //JOptionPane.showMessageDialog(this, "ENVIO(WebServiceException) \nSin respuesta del servidor  del SRI: \n" + ex.getMessage() + "\nGeneración de contingencia... ", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        contingencia = true;
                        obtenerAutorizado = false;
                    }// fin try catch  
                }// fin de envio
            }// fin de disponibilidad
        }// fin de existeAutorizado
        if (obtenerAutorizado) {
            File ret_aut = new File("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoAutorizada\\");
            File ret_no_aut = new File("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoNoAutorizada\\");
            if (ambiente.equals("1")) {
                urlwebService1 = "https://celcer.sri.gob.ec/comprobantes-electronicos-ws/AutorizacionComprobantes?wsdl";
            }
            if (ambiente.equals("2")) {
                urlwebService1 = "https://cel.sri.gob.ec/comprobantes-electronicos-ws/AutorizacionComprobantes?wsdl";
            }
            try {
                CertificadosSSL.instalarCertificados();
                List<String> lst_at = new ArrayList();
                AutorizacionComprobantesWS ws = new AutorizacionComprobantesWS(urlwebService1.toString().trim());
                RespuestaComprobante respuesta = ws.autorizarComprobante(nomclave);
                List<Autorizacion> lstAutorizacion = respuesta.getAutorizaciones().getAutorizacion();
                int contador = 0;
                int tam = lstAutorizacion.size();
                for (Autorizacion autorizacion : lstAutorizacion) {
                    try {
                        A aut = new A();
                        //JOptionPane.showMessageDialog(this, "cantidad de registros autorizacion: " + lstAutorizacion.size(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        if (autorizacion.getEstado().equals("AUTORIZADO")) {
                            //JOptionPane.showMessageDialog(this, "MENSAJE: " + autorizacion.getEstado()+ "\t \t" + contador, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            //System.out.println("AUT: " + autorizacion.getEstado());
                            bandera = true;
                            band = true;
                        } else {
                            if (!bandera && contador < tam) {
                                //JOptionPane.showMessageDialog(this, "MENSAJE: " + autorizacion.getEstado() + "\t \t" + contador, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                                // System.out.println("AUT: " + autorizacion.getEstado());
                            }
                        }//if
                        contador++;
                        if (bandera && band) {
                            band = false;
                            aut.setComprobante("<![CDATA[" + autorizacion.getComprobante() + "]]>");
                            //aut.setComprobante(cps.Sacar_etiqueta(autorizacion.getComprobante()));
                            //JOptionPane.showMessageDialog(null, "xml:  "+aut.getComprobante(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            //System.out.println(ii + "prueba---------> "+aut.getComprobante());
                            aut.setEstado(autorizacion.getEstado());
                            //--
                            Calendar calendar = autorizacion.getFechaAutorizacion().toGregorianCalendar();
                            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");//yyyy/MM/dd
                            String fechaAutorizacion = sdf.format(calendar.getTime());
                            //--
                            if (ambiente.equals("1")) {
                                nomAmbiente = "PRUEBAS";
                            }

                            if (ambiente.equals("2")) {
                                nomAmbiente = "PRODUCCION";
                            }
                            aut.setFechaAutorizacion(fechaAutorizacion);
                            aut.setMensajes(autorizacion.getMensajes());
                            aut.setAmbiente(nomAmbiente);
                            aut.setNumeroAutorizacion(autorizacion.getNumeroAutorizacion());
                            //
                            if (aut.getEstado().equals(estadoAutorizacion)) {
                                fecAutorizacion = aut.getFechaAutorizacion();
                                numeAutorizacion = aut.getNumeroAutorizacion();
                                estado = aut.getEstado();
                                save = true;
                                envio2 = true;
                                buscar_aut++;
                            } else {
                                fecAutorizacion = aut.getFechaAutorizacion();
                                numeAutorizacion = null;
                                estado = aut.getEstado();
                                save = true;
                                envio2 = true;
                            }
                            JAXBContext jc = JAXBContext.newInstance(A.class);
                            Marshaller marshaller = jc.createMarshaller();
                            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
                            marshaller.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE);
                            if (ret_aut.exists()) {
                                Writer writer = new FileWriter("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoAutorizada\\" + nomclave + ".xml");
                                writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                                marshaller.marshal(new JAXBElement<A>(new QName("autorizacion"), A.class, aut), writer);
                                writer.close();
                            } else {
                                ret_aut.mkdirs();
                                Writer writer = new FileWriter("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoAutorizada\\" + nomclave + ".xml");
                                writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                                marshaller.marshal(new JAXBElement<A>(new QName("autorizacion"), A.class, aut), writer);
                                writer.close();
                            }
                            /////////////////////////////////////////////////////////////////////
                            if (estado.equals("AUTORIZADO")) {
                                try {
                                    File file_server = new File(Servidor_emp);
                                    if (file_server.exists()) {
                                        //Writer writer = new FileWriter(Servidor_emp+"\\"+ nomclave + ".xml");
                                        Writer writer = new FileWriter(Servidor_emp + "\\" + nomclave + ".xml");
                                        writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                                        marshaller.marshal(new JAXBElement<A>(new QName("autorizacion"), A.class, aut), writer);
                                        writer.close();
                                    } else {
                                        file_server.mkdirs();
                                        // Writer writer = new FileWriter(Servidor_emp+"\\"+nomclave + ".xml");
                                        Writer writer = new FileWriter(Servidor_emp + "\\" + nomclave + ".xml");
                                        writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                                        marshaller.marshal(new JAXBElement<A>(new QName("autorizacion"), A.class, aut), writer);
                                        writer.close();
                                    }
                                } catch (Exception ex) {
                          //          JOptionPane.showMessageDialog(this, "El directorio no existe: \n" + ex.getMessage(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                                }// catch ex  
                            }
                        } else {
                            if (!bandera && contador == tam) {
                                aut.setComprobante("<![CDATA[" + autorizacion.getComprobante() + "]]>");
                                //aut.setComprobante(cps.Sacar_etiqueta(autorizacion.getComprobante()));
                                //JOptionPane.showMessageDialog(null, "xml:  "+aut.getComprobante(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                                //System.out.println(ii + "prueba---------> "+aut.getComprobante());
                                aut.setEstado(autorizacion.getEstado());
                                //--
                                Calendar calendar = autorizacion.getFechaAutorizacion().toGregorianCalendar();
                                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");//yyyy/MM/dd
                                String fechaAutorizacion = sdf.format(calendar.getTime());
                                //--
                                if (ambiente.equals("1")) {
                                    nomAmbiente = "PRUEBAS";
                                }

                                if (ambiente.equals("2")) {
                                    nomAmbiente = "PRODUCCION";
                                }
                                aut.setFechaAutorizacion(fechaAutorizacion);
                                aut.setMensajes(autorizacion.getMensajes());
                                aut.setAmbiente(nomAmbiente);
                                aut.setNumeroAutorizacion(autorizacion.getNumeroAutorizacion());
                                //
                                if (aut.getEstado().equals(estadoAutorizacion)) {
                                    fecAutorizacion = aut.getFechaAutorizacion();
                                    numeAutorizacion = aut.getNumeroAutorizacion();
                                    estado = aut.getEstado();
                                    save = true;
                                    envio2 = true;
                                    buscar_aut++;
                                } else {
                                    fecAutorizacion = aut.getFechaAutorizacion();
                                    numeAutorizacion = null;
                                    estado = aut.getEstado();
                                    save = true;
                                    envio2 = true;
                                }
                                JAXBContext jc = JAXBContext.newInstance(A.class);
                                Marshaller marshaller = jc.createMarshaller();
                                marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
                                marshaller.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE);
                                if (ret_no_aut.exists()) {
                                    Writer writer = new FileWriter("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoNoAutorizada\\" + nomclave + ".xml");
                                    writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                                    marshaller.marshal(new JAXBElement<A>(new QName("autorizacion"), A.class, aut), writer);
                                    writer.close();
                                } else {
                                    ret_no_aut.mkdirs();
                                    Writer writer = new FileWriter("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoNoAutorizada\\" + nomclave + ".xml");
                                    writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                                    marshaller.marshal(new JAXBElement<A>(new QName("autorizacion"), A.class, aut), writer);
                                    writer.close();
                                }
                            }// no autorizado
                        }// bandera
                    } catch (Exception ex) {
                       // JOptionPane.showMessageDialog(this, "ENVIO(Exception) Sin respuesta del servidor  del SRI: \n" + ex.getMessage() + "\nGeneracion de Contingencia..!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        contingencia = true;
                    }//fin del try catch
                }// fin del for
            } catch (Exception ex) {
               // JOptionPane.showMessageDialog(this, "ENVIO(Exception) Sin respuesta del servidor  del SRI: \n" + ex.getMessage() + "\nGeneracion de Contingencia..!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                contingencia = true;
            }
        }//obtener
        if (contingencia) {
            if (val.valida(codemp, codsuc, tip, cod, num) == 0) {
                TraerClaveContingencia cc = new TraerClaveContingencia();
                String fechaEm = "", fechaEmtemp = "", tipoComp = "", ruc = "", ambiente = "", codigoNum = "", tipoEmi = "", clavecont = "";
                String[] auxserv = {};
                try {
                    //JOptionPane.showMessageDialog(this, "clave: " + nomclave, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    JespXML archivo = new JespXML("C:\\ComprobanteElectronicos\\NOTADEBITO\\notaDebitoGenerada\\" + nomclave + ".xml ");
                    Tag comprobanteRetencion = archivo.leerXML();
                    Tag infoRetencion = comprobanteRetencion.getTagHijoByName("infoNotaDebito");
                    Tag infoTribu = comprobanteRetencion.getTagHijoByName("infoTributaria");
                    Tag fechaEmi = infoRetencion.getTagHijoByName("fechaEmision");
                    Tag ruc_temp = infoTribu.getTagHijoByName("ruc");
                    Tag ambiente_temp = infoTribu.getTagHijoByName("ambiente");
                    fechaEm = fechaEmi.getContenido();
                    fechaEmtemp = fechaEm;
                    auxserv = fechaEm.split("/");
                    fechaEm = auxserv[0] + auxserv[1] + auxserv[2];
                    // System.out.println("fecha: " + fechaEm);
                    ruc = ruc_temp.getContenido();
                    //System.out.println("ruc: " + ruc);
                    ambiente = ambiente_temp.getContenido();
                    //System.out.println("ambiente: " + ambiente);
                    tipoComp = "05";
                    codigoNum = "12345678901234567890123";
                    tipoEmi = "2";
//                    JOptionPane.showMessageDialog(this, "Clave contingencia 48:" + fechaEm + tipoComp + ruc + ambiente
//                            + codigoNum + tipoEmi, "Aviso", JOptionPane.INFORMATION_MESSAGE);

                    clavecont = clv.generaClaveContingencia(fechaEm, tipoComp, ruc, ambiente, codigoNum, tipoEmi);

//                    JOptionPane.showMessageDialog(this, "Clave Contingencia 49: " + clavecont, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    Tag TipoE = infoTribu.getTagHijoByName("TipoEmision");
                    Tag ClaveConti = infoTribu.getTagHijoByName("claveAcceso");
                    TipoE.addContenido(tipoEmi);
                    ClaveConti.addContenido(clavecont);
                    fecAutorizacion = fechaEmtemp;
                    numeAutorizacion = cc.traeClave(codemp, codsuc);
                    estado = "CONTINGENCIA";
                    save = true;
                    pasaAut = false;
                    clave_aux = clavecont;
                } catch (Exception e) {
                    System.out.println("ERROR: Se ha producido un error el leer el fichero\n" + e.getMessage());
                    e.printStackTrace();
                }
            } else {
                if (val.valida(codemp, codsuc, tip, cod, num) >= 1) {
//                    JOptionPane.showMessageDialog(this, "No hay Conexion Con El Web Service del SRI"
//                            + "\nLa Nota Debito: " + cod
//                            + "\nse encuentra generada en contingencia"
//                            + "\nIntente despues de unos minutos, Gracias!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    System.exit(0);
                }
                if (val.valida(codemp, codsuc, tip, cod, num) == -1) {
//                    JOptionPane.showMessageDialog(this, "No hay Conexion Con El Web Service del SRI"
//                            + "\n Error al validar la Contingencia "
//                            + "\n comuniquese con el dpto Sistemas, Gracias!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    System.exit(0);
                }
            }// if del valida 
        }// contingencia
        envio2 = true;
        save = true;
        if (save) {
            try {
                pruebanet bd = new pruebanet();
                con = bd.getConexion();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            try {
                cst = con.prepareCall("{call buscar_insertar_notaCredito_xml(?,?,?,?,?,?,?,?,?)}");
                cst.setString(1, codemp);
                cst.setString(2, codsuc);
                cst.setString(3, "DB");
                cst.setDouble(4, cod);
                cst.setDouble(5, num);
                cst.setString(6, clave_aux);
                cst.setString(7, numeAutorizacion);
                cst.setString(8, fecAutorizacion);
                cst.setString(9, estado);
                rs = cst.executeQuery();
                if (rs == null) {
                    //JOptionPane.showMessageDialog(null, "EL resultado es Nulo", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }
                cst.close();
                con.close();
                FACT_SALIR.setEnabled(true);
            } catch (Exception e) {
            }
        }//SAVE
        if (envio2) {
            if (estado.equals("AUTORIZADO")) {
                //JOptionPane.showMessageDialog(this, "La Nota Debito ha sido: " + estado, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                System.exit(0);
            } else {
                if (estado.equals("NO AUTORIZADO")) {
                 //   JOptionPane.showMessageDialog(this, "La Nota Debito ha sido: " + estado, "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    System.exit(0);
                } else {
                    if (estado.equals("CONTINGENCIA")) {
                        try {
                            pruebanet bd = new pruebanet();
                            con = bd.getConexion();
                        } catch (Exception e) {
                            System.out.println(e.getMessage());
                   //         JOptionPane.showMessageDialog(this, "Error No se puede conectar : " + e.getMessage(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            System.exit(0);
                        }
                        try {
                            cst = con.prepareCall("{call buscar_insertar_contingencia_tabla_xml(?,?,?,?,?,?,?,?,?)}");
                            cst.setString(1, codemp);
                            cst.setString(2, codsuc);
                            cst.setString(3, "DB");
                            cst.setDouble(4, num);
                            cst.setDouble(5, cod);
                            cst.setString(6, clave_aux);
                            cst.setString(7, numeAutorizacion);
                            cst.setString(8, fecAutorizacion);
                            cst.setString(9, estado);
                            rs = cst.executeQuery();
                            if (rs == null) {
                     //           JOptionPane.showMessageDialog(null, "EL resultado es Nulo", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                            cst.close();
                            con.close();
                        } catch (Exception e) {
                        }
                       // JOptionPane.showMessageDialog(this, "La Nota Debito  ha sido genera en CONTINGENCIA ", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        System.exit(0);
                    }
                }
            }
        }
    }

    private void facturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_facturaActionPerformed

    private void FACT_SALIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FACT_SALIRActionPerformed
        this.dispose();
    }//GEN-LAST:event_FACT_SALIRActionPerformed

    private void debitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debitoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_debitoActionPerformed

    private void FACT_PROCESARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FACT_PROCESARActionPerformed
        ///////////////////////////////////////////////////////////////////////////
//        FACT_SALIR.setEnabled(false);
//        FACT_PROCESAR.setEnabled(false);


///////////////////////////////////////////////////////////////////////////////////////////////////////////////     
    }//GEN-LAST:event_FACT_PROCESARActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FEUPW_FACT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FEUPW_FACT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FEUPW_FACT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FEUPW_FACT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FEUPW_NDEB().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FACT_PROCESAR;
    private javax.swing.JButton FACT_SALIR;
    private javax.swing.JTextField debito;
    private javax.swing.JTextField empresa;
    private javax.swing.JTextField factura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField sucursal;
    private javax.swing.JTextField tipo_deb;
    // End of variables declaration//GEN-END:variables
}
